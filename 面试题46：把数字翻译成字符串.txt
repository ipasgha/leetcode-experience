题目详情：
    给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。
    请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

    示例 1:

    输入: 12258
    输出: 5
    解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
    
解题思路：
    首先翻译题设如下：
        当两个相邻数字在[10,25]区间的时候，可以将其组合翻译，否则不可以。
    本题使用动态规划求解。
        ————使用一个一维数组dp[]，其中dp[i]表示前i个字符有几种翻译方式。
        ————前i个字符的翻译方式肯定包括前i-1个字符的翻译方式，因为单独的字符一定可以翻译。
        ————前i-2个字符的翻译方式也可能被接受，当最后两个字符的值在[10,25]区间的时候即可被接受。
        因此，推导出转移方程如下：
            dp[i] = dp[i-1] + dp[i-2] * (stoi(s.substr(i-2, 2)) ∈ [10,25]);
        初始条件设置为dp[0] = dp[1] = 1。
        


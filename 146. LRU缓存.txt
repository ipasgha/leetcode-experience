题目链接：https://leetcode-cn.com/problems/lru-cache/

题目详情：
    运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。
    获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。
    写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。
    要求：get()和put()均具有O(1)时间复杂度。
    
解题思路：
    对数据的读取/写入均算作最近使用过，而删除数据时要删除最近最少使用数据。
    考虑将缓存组织成一个双向链表：
        最近使用的数据均放在尾部，需要删除数据时从头部删除；
        双向链表可以在常数时间内完成读取头部/尾部数据和删除头节点；
        由于链表不支持常数时间内随机读取，因此用一个辅助哈希表，建立从key到listNode的映射。
        在链表的头部和尾部各加入辅助节点。
    总体思路：使用双向链表+辅助哈希表实现对任意元素的常数时间访问+删除。
    空间复杂度：一个容量为n的LRU缓存需要长度为n+2的双向链表和n个表项的辅助哈希表。
